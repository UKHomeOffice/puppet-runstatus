#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
#require 'puppet/runstatus'
require 'json'
require 'puppetdb'
require 'net/http'
require 'net/https'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |server,puppetdbhost,puppetdbport| # Add args you want: |like,so|
    #need to run mcollective to find the last puppet run and status
    command = "mco rpc puppet status -j -F fqdn=/" << server << "/"
    runinfo = `#{command}`
    parsed = JSON.parse(runinfo)
    parsed = parsed[0]
    status = parsed['statuscode']
    status = status.to_i
    if status != 1; then
      certname = parsed['sender']
      query= PuppetDB::Query[:'=','certname',"#{certname}"]
      #puppet run failed - need to query puppetdb
      puppetdb_url = "http://#{puppetdbhost}:#{puppetdbport}"
      puppetdb = PuppetDB::Client.new({:server => puppetdb_url})

      results = puppetdb.request('reports',query)
      results = results.data.last
      report  = results['hash']
      eventsQuery = PuppetDB::Query[:'=','report',"#{report}"]
      events = puppetdb.request('events',eventsQuery)
      events.data.each do |event|
        puts event['timestamp']
        puts event['containment-path']
        puts event['message']
        puts event['status']
      end
    else
      puts parsed['statusmsg']
      exit(status)
    end
  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional


  arg :server
  arg :dbhost

#  version Puppet::Runstatus::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
