#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
#require 'puppet/runstatus'
require 'json'
require 'puppetdb'
require 'net/http'
require 'net/https'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |server,puppetdbhost,puppetdbport,mode,timer| # Add args you want: |like,so|
    #need to run mcollective to find the last puppet run and status
    date = Time.now
    runtime = date.to_time.to_i
    puts mode.downcase
    if mode.downcase == 's'
      command = "mco rpc puppet status -j -S " << server << ""
    elsif mode.downcase == 'f'
      command = "mco rpc puppet status -j -F fqdn=/" << server << "/"
    end
    puts command
    keeprunning = 0
    while keeprunning == 0 do
      keeprunning = 1
      runinfo = `#{command}`
      parses = JSON.parse(runinfo)
      parses.each do |parsed|
        runtimestamp = parsed['data']['lastrun']
         puts timer
        if timer.to_i
          sincelastrun = runtime - runtimestamp
          if sincelastrun > 120
            keeprunning = 0
          end
        end
        status = parsed['statuscode']
        status = status.to_i
        if status != 0; then
          certname = parsed['sender']
          query= PuppetDB::Query[:'=','certname',"#{certname}"]
          #puppet run failed - need to query puppetdb
          puppetdb_url = "http://#{puppetdbhost}:#{puppetdbport}"
          puppetdb = PuppetDB::Client.new({:server => puppetdb_url})
          results = puppetdb.request('reports',query)
          results = results.data.last
          report  = results['hash']
          eventsQuery = PuppetDB::Query[:'=','report',"#{report}"]
          events = puppetdb.request('events',eventsQuery)
          events.data.each do |event|
            if event['level'] == 'error'
              puts certname
              puts event['timestamp']
              puts event['containment-path']
              puts event['message']
              puts event['status']
            end
          end
        else
          puts parsed['statusmsg']
        end
      end
      sleep(timer.to_i)
    end
  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional


  arg :server
  arg :puppetdbhost
  arg :dbport
  arg :mode, :optional
  arg :timerm, :optional 
#  version Puppet::Runstatus::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
