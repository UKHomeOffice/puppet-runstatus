#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
#require 'puppet/runstatus'
require 'JSON'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |server,puppetdbhost,puppetdbport| # Add args you want: |like,so|
    #need to run mcollective to find the last puppet run and status
    runinfo = `mco rpc puppet status -j -F fqdn=/:server/`
    parsed = JSON.parse(runinfo)
    status = parsed['statuscode']
    if status != 0; then
      hash = parsed['hash']
      query = '"=","report", "' << parsed['hash'] <<'"'
      #puppet run failed - need to query puppetdb
      puppetdb = PuppetDB::Connection.new(options[:puppetdb_host], options[:puppetdb_port])
      http = Net::HTTP.new(options[:puppetdb_host], options[:puppetdb_port])
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      query = puppetdb.parse_query(query)
      results = puppetdb.query(server, query, http)
      resultsParsed = JSON.parse(results)
      resultsParsed.each do |report|
        if report[status] != "sucess"
          puts "${report['timestamp']}:  ${report['containment-path']} ${report['message']}"
        end
      end
    else
      puts parsed['statusmsg']
      exit(status)
    end
  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional


  arg :server
  arg :dbhost

#  version Puppet::Runstatus::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
